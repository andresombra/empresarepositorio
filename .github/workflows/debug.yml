# Workflow para investigar a estrutura do reposit√≥rio
name: Debug - Encontrar Projeto

on:
  push:
    branches: [ "main", "develop" ]
  workflow_dispatch: # Permite executar manualmente

jobs:
  debug:
    name: üîç Investigar Estrutura do Reposit√≥rio
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout do reposit√≥rio
      uses: actions/checkout@v4
    
    - name: üóÇÔ∏è Listar todos os arquivos
      run: |
        echo "=== ESTRUTURA COMPLETA DO REPOSIT√ìRIO ==="
        find . -type f -name "*.cs" -o -name "*.csproj" -o -name "*.sln" -o -name "*.json" | sort
        echo ""
        echo "=== √ÅRVORE DE DIRET√ìRIOS ==="
        tree -I 'node_modules|bin|obj' || ls -la
        echo ""
        echo "=== ARQUIVOS NA RAIZ ==="
        ls -la
        echo ""
        echo "=== PROCURANDO ARQUIVOS .NET ==="
        echo "Arquivos .sln:"
        find . -name "*.sln" 2>/dev/null || echo "Nenhum arquivo .sln encontrado"
        echo ""
        echo "Arquivos .csproj:"
        find . -name "*.csproj" 2>/dev/null || echo "Nenhum arquivo .csproj encontrado"
        echo ""
        echo "Arquivos .cs:"
        find . -name "*.cs" | head -10 || echo "Nenhum arquivo .cs encontrado"
        echo ""
        echo "=== DIRET√ìRIOS PRINCIPAIS ==="
        find . -maxdepth 2 -type d | sort
    
    - name: üîß Tentar detectar tipo de projeto
      run: |
        echo "=== AN√ÅLISE DO TIPO DE PROJETO ==="
        
        # Verificar se √© um projeto .NET
        if find . -name "*.csproj" -o -name "*.sln" | grep -q .; then
          echo "‚úÖ Projeto .NET detectado!"
          
          # Encontrar o diret√≥rio do projeto
          PROJECT_FILE=$(find . -name "*.csproj" | head -1)
          if [ -n "$PROJECT_FILE" ]; then
            PROJECT_DIR=$(dirname "$PROJECT_FILE")
            echo "üìÅ Diret√≥rio do projeto: $PROJECT_DIR"
            echo "üìÑ Arquivo do projeto: $PROJECT_FILE"
            
            # Tentar ler o conte√∫do do arquivo de projeto
            echo "=== CONTE√öDO DO ARQUIVO DE PROJETO ==="
            cat "$PROJECT_FILE"
          fi
          
          # Verificar se existe solu√ß√£o
          SOLUTION_FILE=$(find . -name "*.sln" | head -1)
          if [ -n "$SOLUTION_FILE" ]; then
            echo "üìÑ Arquivo de solu√ß√£o: $SOLUTION_FILE"
            echo "=== CONTE√öDO DA SOLU√á√ÉO ==="
            cat "$SOLUTION_FILE"
          fi
          
        else
          echo "‚ùå N√£o √© um projeto .NET ou arquivos n√£o encontrados"
          echo "Verificando outros tipos de projeto..."
          
          # Verificar outros tipos
          if [ -f "package.json" ]; then
            echo "üü¢ Projeto Node.js detectado"
          elif [ -f "requirements.txt" ] || [ -f "setup.py" ]; then
            echo "üêç Projeto Python detectado"
          elif [ -f "pom.xml" ]; then
            echo "‚òï Projeto Java detectado"
          else
            echo "‚ùì Tipo de projeto n√£o identificado"
          fi
        fi
    
    - name: üéØ Recomenda√ß√µes
      run: |
        echo "=== RECOMENDA√á√ïES ==="
        echo "Com base na an√°lise acima:"
        echo "1. Verifique se voc√™ tem arquivos .csproj ou .sln no reposit√≥rio"
        echo "2. Se n√£o tiver, voc√™ precisa criar um projeto .NET primeiro"
        echo "3. Se tiver, anote o caminho exato para usar no workflow"
        echo "4. Execute: 'dotnet new sln' para criar uma solu√ß√£o se necess√°rio"
        echo "5. Execute: 'dotnet new webapi' ou 'dotnet new console' para criar um projeto"
